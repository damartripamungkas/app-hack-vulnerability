const path = require("node:path");
const process = require("node:process");


const getConfigData = () => {
    /**
     * getting config data from config.js
     * use cwd() because one of the requirements is to import other code without having to include that code when compiling
     */
    const pathFile = path.join(process.cwd(), "config.js");
    const data = require(pathFile);
    return data;
};

const getDatabase = () => {
    /**
     * example license_key allowed in the application
     * usually in the form of array data from the database or can be validated to the server by sending license_key
     */
    const database = ["111", "222", "333", "444", "555"];
    return database;
};

const isValidLicenseKey = async (database = [""], key = "") => {
    /**
     * will be matched if the user's license_key doesn't exist then it will forcefully call process.exit() and will stop the script working
     */
    for (let index = 0; index < database.length; index++) {
        const element = database[index];
        if (element == key) return;
    }

    console.log(`[ERROR]: invalid license_key`);
    process.exit();
};

const init = () => {
    const arrayLicenseKey = getDatabase();
    const { license_key, port } = getConfigData();
    isValidLicenseKey(arrayLicenseKey, license_key);
    console.log(`[INFO]: example app`);
    console.log(`[INFO]: application is already running on the port: ${port}`);
    setInterval(() => { }, 1000); // handle script to keep it alive if there are no errors
};

init();